// JHipster JDL

// LibraryUser entity
entity LibraryUser {
  	fullname String required minlength(2) maxlength(40)
	birthdate LocalDate required
    	memeberdate Instant required
	email String required unique pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
	mobile String unique pattern(/^(\+\d{1,3}[- ]?)?\d{10}$/)
	adress String maxlength(80)
	note String maxlength(200)
  	image ImageBlob maxbytes(100000)
}

// Author entity
entity Author {
	fullname String required minlength(2) maxlength(40)
	birthyear Integer max(2010)
	deathyear Integer max(2022)
	note String maxlength(200)
}


// Genre entity
entity Genre {
 	name String required minlength(2) maxlength(40)
	note String maxlength(200)
}

// Book entity
entity Book {
    // @Id isbn String required unique pattern(/^(?:ISBN(?:-13)?:?\ )?(?=[0-9]{13}$|(?=(?:[0-9]+[-\ ]){4})[-\ 0-9]{17}$)97[89][-\ ]?[0-9]{1,5}[-\ ]?[0-9]+[-\ ]?[0-9]+[-\ ]?[0-9]$/)
    isbn String required unique pattern(/^((978[--– ])?[0-9][0-9--– ]{10}[--– ][0-9xX])|((978)?[0-9]{9}[0-9Xx])/)
    title String required minlength(2) maxlength(40)
    year Integer max(2022)
    note String maxlength(200)
    image ImageBlob maxbytes(100000)
}

// UserBookLending entity
entity UserBookLending {
  loantime Instant required
  returntime Instant
  status LendingStatus required
  note String maxlength(200)
}

enum LendingStatus {
    LENDED, RETURNED, RETURNED_DAMAGED, LOST
}

relationship OneToOne {
 LibraryUser{user} to User
}

relationship ManyToMany {
     Author{genres(name) required} to Genre{authors(fullname)}
     Book{genres(name) required} to Genre{books(title)}
}

// defining multiple OneToMany relationships
relationship OneToMany {
	Author to Book{author(fullname) required}
    LibraryUser to UserBookLending{user(fullname) required}
    Book to UserBookLending{book(title) required}
}

service * with serviceClass
dto * with mapstruct
paginate LibraryUser, Author, Book, UserBookLending with pagination except Genre
//search LibraryUser, Author, Book, UserBookLending with elasticsearch except Genre
